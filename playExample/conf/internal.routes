### NoDocs ###
GET   /docs/swagger-ui/*file        controllers.Assets.at(path:String="/public/lib/swagger-ui", file:String)

### NoDocs ###
GET   /assets/*file                 controllers.Assets.versioned(path="/public", file: Asset)

->   /bandit/  bandit.Routes



###
#  summary: create a new a/b test
#  parameters:
#    - name: body
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.AbtestSpec'
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Abtest'
###
POST      /tests                                                controllers.MyAbtestController.create()

###
#  summary: create a new a/b test and auto resolves conflict by terminating/deleting existing conflict tests
#  parameters:
#    - name: body
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.AbtestSpec'
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Abtest'
###
POST      /tests/auto                                                controllers.MyAbtestController.createAuto()

###
#  summary: continue an a/b test on a feature with which there is a scheduled or on-going test
#  parameters:
#    - name: body
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.AbtestSpec'
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Abtest'
###
PUT      /tests                                                controllers.MyAbtestController.continue()

###
#  summary: get all tests running at a certain time
#  parameters:
#    - name: at
#      description: Optional. Epoch seconds for the time as of which the tests are running, if not given the results will be of the current moment.
#    - name: endAfter
#      description: Optional. Epoch seconds for the time as of which the tests end after. Note that if both `at` and `endAfter` are passed in, you will get a BAD_REQUEST
#  responses:
#    200:
#      description: A list of all running tests as of the `at`
#
###
GET      /tests                                                controllers.MyAbtestController.getAllTests(at: Option[Long], endAfter: Option[Long])


###
#  summary: get all tests and feature running at a certain time
#  parameters:
#    - name: at
#      description: Optional. Epoch seconds for the time as of which the tests are running, if not given the results will be of the current moment.
#  responses:
#    200:
#      description: A list of all running tests as of the `at`
#
###
GET      /testsWithFeatures                                    controllers.MyAbtestController.getAllTestsCached(at: Option[Long])


###
#  summary: get tests for a feature
#  responses:
#    200:
#      description: a list of tests under the feature
#
###
GET      /features/:feature/tests                                              controllers.MyAbtestController.getByFeature(feature: String)

###
#  summary: get a list of all features
#  responses:
#    200:
#      description: a list of strings each represent a feature
#
###
GET      /features                                              controllers.MyAbtestController.getAllFeatures

###
#  summary: Get a user's tests and the groups he/she is in
#  parameters:
#    - name: at
#      description: Optional. epoch seconds for the time as of which the user's a/b test groups be returned, if not given the results will be of the current moment.
#  responses:
#    200:
#      description: A map with feature names as keys and group names as values
#
###
GET       /users/:userId/tests/groups            controllers.MyAbtestController.getGroups(userId: String, at: Option[Long], tags: Option[List[String]])




###
#  summary: get a abtest
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Abtest'
###
GET       /tests/:testId                                        controllers.MyAbtestController.get(testId)


###
#  summary: terminate an abtest before it expires, this will allow creating a new test for the same feature.
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Abtest'
###
DELETE       /tests/:testId                                        controllers.MyAbtestController.terminate(testId)

###
#  summary: Add an group meta to a group
#  parameters:
#    - name: body
#      schema:
#        type: object
#      description: >
#        a Json object that top level key should be group names, under each key should be group specific setting, for example:<br />
#        { "A" : { "labelColor": "red" }, "B" : { "labelColor": "blue" }}
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Abtest'
###
PUT       /tests/:testId/groups/metas    controllers.MyAbtestController.addGroupMetas(testId: String, auto: Boolean)

###
#  summary: remove group meta from a test
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Abtest'
###
DELETE       /tests/:testId/groups/metas    controllers.MyAbtestController.removeGroupMetas(testId: String, auto: Boolean)


###
#  summary: Add an override for testing purpose
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Feature'
###
PUT       /features/:feature/groups/:groupName/overrides/:userId    controllers.MyAbtestController.addOverride(feature: String, userId: String, groupName: String)


######
#  summary: toggle whether override overrides eligibility control
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Feature'
###
PUT       /features/:feature/overridesEligibility    controllers.MyAbtestController.setOverrideEligibilityIn(feature: String, overrideEligibility: Boolean)


###
#  summary: delete an override
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Feature'
###
DELETE    /features/:feature/overrides/:userId                      controllers.MyAbtestController.removeOverride(feature: String, userId: String)

###
#  summary: remove all overrides from a feature
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Feature'
###
DELETE    /features/:feature/overrides                          controllers.MyAbtestController.removeAllOverrides(feature: String)

###
#  summary: GET overrides for a feature
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Feature'
###
GET    /features/:feature/overrides                      controllers.MyAbtestController.getOverrides(feature: String)

###
#  summary: Add overrides for a feature
#  parameters:
#    - name: body
#      required: true
#      schema:
#        type: object
#      description: >
#        a Json object whose keys are profile ids and values are group names <br />
#        { "12314" :  "B" , "32562": "A"}
#  responses:
#    200:
#      schema:
#        $ref: '#/definitions/com.iheart.thomas.abtest.model.Feature'
###
POST    /features/:feature/overrides                      controllers.MyAbtestController.addOverrides(feature: String)


###
#  summary: Utility, parse date string to epoch second
###
GET      /utils/epoch                                               controllers.MyAbtestController.parseEpoch(dateTime: String)


###
#  summary: get a KPI Distribution by name
#  responses:
#    200:
#      description: KPI Distribution found
###
GET   /KPIs/:name   controllers.MyAbtestController.getKPIDistribution(name: String)

###
#  summary: get a KPI Distribution by name
#  parameters:
#    - name: body
#      required: true
#      description: >
#        json representation of the KPI distribution
#  responses:
#    200:
#      description: KPI Distribution added
###
POST   /KPIs/    controllers.MyAbtestController.updateKPIDistribution


->   /           publicEndpoints.Routes
